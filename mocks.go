// Code generated by MockGen. DO NOT EDIT.
// Source: automa.go

// Package automa is a generated GoMock package.
package automa

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockForward is a mock of Forward interface.
type MockForward struct {
	ctrl     *gomock.Controller
	recorder *MockForwardMockRecorder
}

// MockForwardMockRecorder is the mock recorder for MockForward.
type MockForwardMockRecorder struct {
	mock *MockForward
}

// NewMockForward creates a new mock instance.
func NewMockForward(ctrl *gomock.Controller) *MockForward {
	mock := &MockForward{ctrl: ctrl}
	mock.recorder = &MockForwardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForward) EXPECT() *MockForwardMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockForward) Run(ctx context.Context, prevSuccess *Success) (Reports, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, prevSuccess)
	ret0, _ := ret[0].(Reports)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockForwardMockRecorder) Run(ctx, prevSuccess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockForward)(nil).Run), ctx, prevSuccess)
}

// MockBackward is a mock of Backward interface.
type MockBackward struct {
	ctrl     *gomock.Controller
	recorder *MockBackwardMockRecorder
}

// MockBackwardMockRecorder is the mock recorder for MockBackward.
type MockBackwardMockRecorder struct {
	mock *MockBackward
}

// NewMockBackward creates a new mock instance.
func NewMockBackward(ctrl *gomock.Controller) *MockBackward {
	mock := &MockBackward{ctrl: ctrl}
	mock.recorder = &MockBackwardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackward) EXPECT() *MockBackwardMockRecorder {
	return m.recorder
}

// Rollback mocks base method.
func (m *MockBackward) Rollback(ctx context.Context, prevFailure *Failure) (Reports, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx, prevFailure)
	ret0, _ := ret[0].(Reports)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rollback indicates an expected call of Rollback.
func (mr *MockBackwardMockRecorder) Rollback(ctx, prevFailure interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockBackward)(nil).Rollback), ctx, prevFailure)
}

// MockNextPrevStep is a mock of NextPrevStep interface.
type MockNextPrevStep struct {
	ctrl     *gomock.Controller
	recorder *MockNextPrevStepMockRecorder
}

// MockNextPrevStepMockRecorder is the mock recorder for MockNextPrevStep.
type MockNextPrevStepMockRecorder struct {
	mock *MockNextPrevStep
}

// NewMockNextPrevStep creates a new mock instance.
func NewMockNextPrevStep(ctrl *gomock.Controller) *MockNextPrevStep {
	mock := &MockNextPrevStep{ctrl: ctrl}
	mock.recorder = &MockNextPrevStepMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNextPrevStep) EXPECT() *MockNextPrevStepMockRecorder {
	return m.recorder
}

// GetNext mocks base method.
func (m *MockNextPrevStep) GetNext() Forward {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNext")
	ret0, _ := ret[0].(Forward)
	return ret0
}

// GetNext indicates an expected call of GetNext.
func (mr *MockNextPrevStepMockRecorder) GetNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNext", reflect.TypeOf((*MockNextPrevStep)(nil).GetNext))
}

// GetPrev mocks base method.
func (m *MockNextPrevStep) GetPrev() Backward {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrev")
	ret0, _ := ret[0].(Backward)
	return ret0
}

// GetPrev indicates an expected call of GetPrev.
func (mr *MockNextPrevStepMockRecorder) GetPrev() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrev", reflect.TypeOf((*MockNextPrevStep)(nil).GetPrev))
}

// SetNext mocks base method.
func (m *MockNextPrevStep) SetNext(next Forward) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNext", next)
}

// SetNext indicates an expected call of SetNext.
func (mr *MockNextPrevStepMockRecorder) SetNext(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNext", reflect.TypeOf((*MockNextPrevStep)(nil).SetNext), next)
}

// SetPrev mocks base method.
func (m *MockNextPrevStep) SetPrev(prev Backward) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrev", prev)
}

// SetPrev indicates an expected call of SetPrev.
func (mr *MockNextPrevStepMockRecorder) SetPrev(prev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrev", reflect.TypeOf((*MockNextPrevStep)(nil).SetPrev), prev)
}

// MockRollbackableStep is a mock of RollbackableStep interface.
type MockRollbackableStep struct {
	ctrl     *gomock.Controller
	recorder *MockRollbackableStepMockRecorder
}

// MockRollbackableStepMockRecorder is the mock recorder for MockRollbackableStep.
type MockRollbackableStepMockRecorder struct {
	mock *MockRollbackableStep
}

// NewMockRollbackableStep creates a new mock instance.
func NewMockRollbackableStep(ctrl *gomock.Controller) *MockRollbackableStep {
	mock := &MockRollbackableStep{ctrl: ctrl}
	mock.recorder = &MockRollbackableStepMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRollbackableStep) EXPECT() *MockRollbackableStepMockRecorder {
	return m.recorder
}

// GetNext mocks base method.
func (m *MockRollbackableStep) GetNext() Forward {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNext")
	ret0, _ := ret[0].(Forward)
	return ret0
}

// GetNext indicates an expected call of GetNext.
func (mr *MockRollbackableStepMockRecorder) GetNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNext", reflect.TypeOf((*MockRollbackableStep)(nil).GetNext))
}

// GetPrev mocks base method.
func (m *MockRollbackableStep) GetPrev() Backward {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrev")
	ret0, _ := ret[0].(Backward)
	return ret0
}

// GetPrev indicates an expected call of GetPrev.
func (mr *MockRollbackableStepMockRecorder) GetPrev() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrev", reflect.TypeOf((*MockRollbackableStep)(nil).GetPrev))
}

// Rollback mocks base method.
func (m *MockRollbackableStep) Rollback(ctx context.Context, prevFailure *Failure) (Reports, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx, prevFailure)
	ret0, _ := ret[0].(Reports)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rollback indicates an expected call of Rollback.
func (mr *MockRollbackableStepMockRecorder) Rollback(ctx, prevFailure interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockRollbackableStep)(nil).Rollback), ctx, prevFailure)
}

// Run mocks base method.
func (m *MockRollbackableStep) Run(ctx context.Context, prevSuccess *Success) (Reports, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, prevSuccess)
	ret0, _ := ret[0].(Reports)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockRollbackableStepMockRecorder) Run(ctx, prevSuccess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRollbackableStep)(nil).Run), ctx, prevSuccess)
}

// SetNext mocks base method.
func (m *MockRollbackableStep) SetNext(next Forward) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNext", next)
}

// SetNext indicates an expected call of SetNext.
func (mr *MockRollbackableStepMockRecorder) SetNext(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNext", reflect.TypeOf((*MockRollbackableStep)(nil).SetNext), next)
}

// SetPrev mocks base method.
func (m *MockRollbackableStep) SetPrev(prev Backward) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrev", prev)
}

// SetPrev indicates an expected call of SetPrev.
func (mr *MockRollbackableStepMockRecorder) SetPrev(prev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrev", reflect.TypeOf((*MockRollbackableStep)(nil).SetPrev), prev)
}

// MockFsmController is a mock of WorkflowEngine interface.
type MockFsmController struct {
	ctrl     *gomock.Controller
	recorder *MockFsmControllerMockRecorder
}

// MockFsmControllerMockRecorder is the mock recorder for MockFsmController.
type MockFsmControllerMockRecorder struct {
	mock *MockFsmController
}

// NewMockFsmController creates a new mock instance.
func NewMockFsmController(ctrl *gomock.Controller) *MockFsmController {
	mock := &MockFsmController{ctrl: ctrl}
	mock.recorder = &MockFsmControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFsmController) EXPECT() *MockFsmControllerMockRecorder {
	return m.recorder
}

// End mocks base method.
func (m *MockFsmController) End(ctx context.Context, logReports bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "End", ctx, logReports)
}

// End indicates an expected call of End.
func (mr *MockFsmControllerMockRecorder) End(ctx, logReports interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockFsmController)(nil).End), ctx, logReports)
}

// Start mocks base method.
func (m *MockFsmController) Start(ctx context.Context) (Reports, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(Reports)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockFsmControllerMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockFsmController)(nil).Start), ctx)
}
