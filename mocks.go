// Code generated by MockGen. DO NOT EDIT.
// Source: automa.go

// Package automa is a generated GoMock package.
package automa

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockForward is a mock of Forward interface.
type MockForward struct {
	ctrl     *gomock.Controller
	recorder *MockForwardMockRecorder
}

// MockForwardMockRecorder is the mock recorder for MockForward.
type MockForwardMockRecorder struct {
	mock *MockForward
}

// NewMockForward creates a new mock instance.
func NewMockForward(ctrl *gomock.Controller) *MockForward {
	mock := &MockForward{ctrl: ctrl}
	mock.recorder = &MockForwardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForward) EXPECT() *MockForwardMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockForward) Run(ctx context.Context, prevSuccess *Success) (Reports, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, prevSuccess)
	ret0, _ := ret[0].(Reports)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockForwardMockRecorder) Run(ctx, prevSuccess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockForward)(nil).Run), ctx, prevSuccess)
}

// MockBackward is a mock of Backward interface.
type MockBackward struct {
	ctrl     *gomock.Controller
	recorder *MockBackwardMockRecorder
}

// MockBackwardMockRecorder is the mock recorder for MockBackward.
type MockBackwardMockRecorder struct {
	mock *MockBackward
}

// NewMockBackward creates a new mock instance.
func NewMockBackward(ctrl *gomock.Controller) *MockBackward {
	mock := &MockBackward{ctrl: ctrl}
	mock.recorder = &MockBackwardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackward) EXPECT() *MockBackwardMockRecorder {
	return m.recorder
}

// Rollback mocks base method.
func (m *MockBackward) Rollback(ctx context.Context, prevFailure *Failure) (Reports, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx, prevFailure)
	ret0, _ := ret[0].(Reports)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rollback indicates an expected call of Rollback.
func (mr *MockBackwardMockRecorder) Rollback(ctx, prevFailure interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockBackward)(nil).Rollback), ctx, prevFailure)
}

// MockChoreographer is a mock of Choreographer interface.
type MockChoreographer struct {
	ctrl     *gomock.Controller
	recorder *MockChoreographerMockRecorder
}

// MockChoreographerMockRecorder is the mock recorder for MockChoreographer.
type MockChoreographerMockRecorder struct {
	mock *MockChoreographer
}

// NewMockChoreographer creates a new mock instance.
func NewMockChoreographer(ctrl *gomock.Controller) *MockChoreographer {
	mock := &MockChoreographer{ctrl: ctrl}
	mock.recorder = &MockChoreographerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChoreographer) EXPECT() *MockChoreographerMockRecorder {
	return m.recorder
}

// GetNext mocks base method.
func (m *MockChoreographer) GetNext() Forward {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNext")
	ret0, _ := ret[0].(Forward)
	return ret0
}

// GetNext indicates an expected call of GetNext.
func (mr *MockChoreographerMockRecorder) GetNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNext", reflect.TypeOf((*MockChoreographer)(nil).GetNext))
}

// GetPrev mocks base method.
func (m *MockChoreographer) GetPrev() Backward {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrev")
	ret0, _ := ret[0].(Backward)
	return ret0
}

// GetPrev indicates an expected call of GetPrev.
func (mr *MockChoreographerMockRecorder) GetPrev() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrev", reflect.TypeOf((*MockChoreographer)(nil).GetPrev))
}

// SetNext mocks base method.
func (m *MockChoreographer) SetNext(next Forward) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNext", next)
}

// SetNext indicates an expected call of SetNext.
func (mr *MockChoreographerMockRecorder) SetNext(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNext", reflect.TypeOf((*MockChoreographer)(nil).SetNext), next)
}

// SetPrev mocks base method.
func (m *MockChoreographer) SetPrev(prev Backward) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrev", prev)
}

// SetPrev indicates an expected call of SetPrev.
func (mr *MockChoreographerMockRecorder) SetPrev(prev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrev", reflect.TypeOf((*MockChoreographer)(nil).SetPrev), prev)
}

// MockAtomicStep is a mock of AtomicStep interface.
type MockAtomicStep struct {
	ctrl     *gomock.Controller
	recorder *MockAtomicStepMockRecorder
}

// MockAtomicStepMockRecorder is the mock recorder for MockAtomicStep.
type MockAtomicStepMockRecorder struct {
	mock *MockAtomicStep
}

// NewMockAtomicStep creates a new mock instance.
func NewMockAtomicStep(ctrl *gomock.Controller) *MockAtomicStep {
	mock := &MockAtomicStep{ctrl: ctrl}
	mock.recorder = &MockAtomicStepMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAtomicStep) EXPECT() *MockAtomicStepMockRecorder {
	return m.recorder
}

// GetNext mocks base method.
func (m *MockAtomicStep) GetNext() Forward {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNext")
	ret0, _ := ret[0].(Forward)
	return ret0
}

// GetNext indicates an expected call of GetNext.
func (mr *MockAtomicStepMockRecorder) GetNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNext", reflect.TypeOf((*MockAtomicStep)(nil).GetNext))
}

// GetPrev mocks base method.
func (m *MockAtomicStep) GetPrev() Backward {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrev")
	ret0, _ := ret[0].(Backward)
	return ret0
}

// GetPrev indicates an expected call of GetPrev.
func (mr *MockAtomicStepMockRecorder) GetPrev() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrev", reflect.TypeOf((*MockAtomicStep)(nil).GetPrev))
}

// Rollback mocks base method.
func (m *MockAtomicStep) Rollback(ctx context.Context, prevFailure *Failure) (Reports, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx, prevFailure)
	ret0, _ := ret[0].(Reports)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rollback indicates an expected call of Rollback.
func (mr *MockAtomicStepMockRecorder) Rollback(ctx, prevFailure interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockAtomicStep)(nil).Rollback), ctx, prevFailure)
}

// Run mocks base method.
func (m *MockAtomicStep) Run(ctx context.Context, prevSuccess *Success) (Reports, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, prevSuccess)
	ret0, _ := ret[0].(Reports)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockAtomicStepMockRecorder) Run(ctx, prevSuccess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockAtomicStep)(nil).Run), ctx, prevSuccess)
}

// SetNext mocks base method.
func (m *MockAtomicStep) SetNext(next Forward) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNext", next)
}

// SetNext indicates an expected call of SetNext.
func (mr *MockAtomicStepMockRecorder) SetNext(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNext", reflect.TypeOf((*MockAtomicStep)(nil).SetNext), next)
}

// SetPrev mocks base method.
func (m *MockAtomicStep) SetPrev(prev Backward) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrev", prev)
}

// SetPrev indicates an expected call of SetPrev.
func (mr *MockAtomicStepMockRecorder) SetPrev(prev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrev", reflect.TypeOf((*MockAtomicStep)(nil).SetPrev), prev)
}

// MockAtomicStepRegistry is a mock of AtomicStepRegistry interface.
type MockAtomicStepRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockAtomicStepRegistryMockRecorder
}

// MockAtomicStepRegistryMockRecorder is the mock recorder for MockAtomicStepRegistry.
type MockAtomicStepRegistryMockRecorder struct {
	mock *MockAtomicStepRegistry
}

// NewMockAtomicStepRegistry creates a new mock instance.
func NewMockAtomicStepRegistry(ctrl *gomock.Controller) *MockAtomicStepRegistry {
	mock := &MockAtomicStepRegistry{ctrl: ctrl}
	mock.recorder = &MockAtomicStepRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAtomicStepRegistry) EXPECT() *MockAtomicStepRegistryMockRecorder {
	return m.recorder
}

// BuildWorkflow mocks base method.
func (m *MockAtomicStepRegistry) BuildWorkflow(stepIDs []string) (AtomicWorkflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildWorkflow", stepIDs)
	ret0, _ := ret[0].(AtomicWorkflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildWorkflow indicates an expected call of BuildWorkflow.
func (mr *MockAtomicStepRegistryMockRecorder) BuildWorkflow(stepIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildWorkflow", reflect.TypeOf((*MockAtomicStepRegistry)(nil).BuildWorkflow), stepIDs)
}

// GetStep mocks base method.
func (m *MockAtomicStepRegistry) GetStep(id string) AtomicStep {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStep", id)
	ret0, _ := ret[0].(AtomicStep)
	return ret0
}

// GetStep indicates an expected call of GetStep.
func (mr *MockAtomicStepRegistryMockRecorder) GetStep(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStep", reflect.TypeOf((*MockAtomicStepRegistry)(nil).GetStep), id)
}

// RegisterSteps mocks base method.
func (m *MockAtomicStepRegistry) RegisterSteps(steps map[string]AtomicStep) AtomicStepRegistry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSteps", steps)
	ret0, _ := ret[0].(AtomicStepRegistry)
	return ret0
}

// RegisterSteps indicates an expected call of RegisterSteps.
func (mr *MockAtomicStepRegistryMockRecorder) RegisterSteps(steps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSteps", reflect.TypeOf((*MockAtomicStepRegistry)(nil).RegisterSteps), steps)
}

// MockAtomicWorkflow is a mock of AtomicWorkflow interface.
type MockAtomicWorkflow struct {
	ctrl     *gomock.Controller
	recorder *MockAtomicWorkflowMockRecorder
}

// MockAtomicWorkflowMockRecorder is the mock recorder for MockAtomicWorkflow.
type MockAtomicWorkflowMockRecorder struct {
	mock *MockAtomicWorkflow
}

// NewMockAtomicWorkflow creates a new mock instance.
func NewMockAtomicWorkflow(ctrl *gomock.Controller) *MockAtomicWorkflow {
	mock := &MockAtomicWorkflow{ctrl: ctrl}
	mock.recorder = &MockAtomicWorkflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAtomicWorkflow) EXPECT() *MockAtomicWorkflowMockRecorder {
	return m.recorder
}

// End mocks base method.
func (m *MockAtomicWorkflow) End(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "End", ctx)
}

// End indicates an expected call of End.
func (mr *MockAtomicWorkflowMockRecorder) End(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockAtomicWorkflow)(nil).End), ctx)
}

// Start mocks base method.
func (m *MockAtomicWorkflow) Start(ctx context.Context) (Reports, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(Reports)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockAtomicWorkflowMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAtomicWorkflow)(nil).Start), ctx)
}
